apply plugin: 'com.android.library'
group = 'com.github.sweet2o09'

/**
 * android 代码块用来配置 Android 特定的构建配置
 */
android {

    /**
     * compileSdkVersion 用来指定 Gradle 用来编译应用的 Android API level，也就是说
     * 你的应用可以使用这个 API level 及更低 API level 的 API 特性
     */
    compileSdkVersion rootProject.ext.compileSdkVersion

    /**
     * buildToolsVersion 用来指定 SDK 所有构建工具、命令行工具、以及 Gradle 用来构建应用的编译器版本
     * 你需要使用 SDK Manager 下载好该版本的构建工具
     * 在 3.0.0 或更高版本的插件中。该属性是可选的，插件会使用推荐的版本
     */
//    buildToolsVersion rootProject.ext.buildToolsVersion

    /**
     * defaultConfig 代码块包含所有构建变体（build variants）默认使用的配置，
     * 也可以重写 main/AndroidManifest.xml 中的属性
     * 当然，你也可以在 product flavors（产品风味）中重写其中一些属性
     */
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                //EventBus加速模式
                arguments = [eventBusIndex: 'com.caihan.scframe.utils.evenbus.MyEventBusIndex']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true//zipAlign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true//zipAlign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        androidTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

//统一版本号
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion rootProject.ext.supportLibVersion
            }
        }
    }
}



dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    api "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    api "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    api "com.android.support:design:${rootProject.ext.supportLibVersion}"
    api "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    api "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"

    /** 安卓工具类库 */
    api 'com.blankj:utilcode:1.20.3'

    /** Android智能下拉刷新框架 */
    api 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
    api 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.3'

    /** RecyclerAdapter框架 */
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.40'

    /** ImmersionBar沉浸式状态栏和沉浸式导航栏管理 */
    api 'com.gyf.barlibrary:barlibrary:2.3.0'

    /** EventBus加速模式 */
    api 'org.greenrobot:eventbus:3.1.1'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'

    /** 运行权限管理库,兼容了国产机 */
    api 'com.yanzhenjie:permission:1.1.2'

    /** butterknife */
//    api 'com.jakewharton:butterknife:8.8.1'
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    /** 高仿新版58加载动画使用 */
    api 'com.nineoldandroids:library:2.4.0'

    /** 图片加载 */
    api 'com.github.bumptech.glide:glide:3.7.0'

    /** Material样式Dialog */
    api 'com.afollestad.material-dialogs:core:0.9.6.0'

    /** Luban(鲁班)图片压缩 */
    api 'top.zibin:Luban:1.1.7'

    /** 扫码 */
    api 'cn.bingoogolapple:bga-qrcode-zxing:1.3.4'

    /** RxJava */
    api 'io.reactivex.rxjava2:rxandroid:2.1.0'
    api "io.reactivex.rxjava2:rxjava:2.2.3"
    api 'com.jakewharton.rxbinding2:rxbinding:2.2.0'
    /** Retrofit2 */
    api 'com.squareup.retrofit2:retrofit:2.4.0'
    api 'com.squareup.retrofit2:converter-gson:2.4.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    api 'org.ligboy.retrofit2:converter-fastjson-android:2.2.0'
    //日志拦截器
    api 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    /** RxLifecycle
     * 基础库:
     * Android库:里面使用了Android的生命周期方法,内部引用了基础库，如果使用此库则无需再引用基础库
     * Android组件库:里面定义了例如RxAppCompatActivity、RxFragment之类的Android组件,内部引用了基础库和Android库，如果使用此库则无需再重复引用
     * */
//    api 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
//    api 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    api 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'

    /** Json解析 */
    api 'com.alibaba:fastjson:1.1.70.android'
    api 'com.google.code.gson:gson:2.8.5'

    /** 混淆配置 */
    api 'com.blankj:free-proguard:0.0.8'

//    /** RxEasyHttp */
//    api 'com.zhouyou:rxeasyhttp:2.1.3'
}
