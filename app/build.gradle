/**
 * 为这个构建应用 Gradle 的 Android 插件，以便 android 代码块中 Android 特定的构建配置可用
 */
apply plugin: 'com.android.application'

//加载资源.在本地的 product.properties 文件设置了一些参数，从这里获取
Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('./app/product.properties').newDataInputStream()
properties.load(inputStream)

//获取时间戳
def getDate() {
    return new Date().format('YYYYMMddHHmm')
}

/**
 * android 代码块用来配置 Android 特定的构建配置
 */
android {

    /**
     * compileSdkVersion 用来指定 Gradle 用来编译应用的 Android API level，也就是说
     * 你的应用可以使用这个 API level 及更低 API level 的 API 特性
     */
    compileSdkVersion rootProject.ext.compileSdkVersion

    /**
     * buildToolsVersion 用来指定 SDK 所有构建工具、命令行工具、以及 Gradle 用来构建应用的编译器版本
     * 你需要使用 SDK Manager 下载好该版本的构建工具
     * 在 3.0.0 或更高版本的插件中。该属性是可选的，插件会使用推荐的版本
     */
//    buildToolsVersion rootProject.ext.buildToolsVersion

    /**
     * defaultConfig 代码块包含所有构建变体（build variants）默认使用的配置，
     * 也可以重写 main/AndroidManifest.xml 中的属性
     * 当然，你也可以在 product flavors（产品风味）中重写其中一些属性
     */
    defaultConfig {
        /**
         * applicationId 是发布时的唯一指定包名，尽管如此，你还是需要在 main/AndroidManifest.xml 文件中
         * 定义值是该包名的 package 属性
         */
        applicationId "app.caihan.myscframe"
        // 定义可以运行该应用的最小 API level
        minSdkVersion rootProject.ext.minSdkVersion
        // 指定测试该应用的 API level
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 定义应用的版本号
        versionCode rootProject.ext.versionCode
        // 定义用户友好型的版本号描述
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //开启multi-dexing支持
        multiDexEnabled true
    }

    /**
     * 签名配置
     * storeFile签名文件
     * storePassword签名证书文件的密码
     * storeType签名证书类型
     * keyAlias签名证书中秘钥别名
     * keyPassword签名证书中改密钥的密码
     */
    signingConfigs {
        releaseConfig {
            storeFile file(properties.getProperty('RELEASE_STORE_FILE'))
            storePassword properties.getProperty('RELEASE_STORE_PASSWORD')
            keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
            keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            v2SigningEnabled false
        }
        debugConfig {
            storeFile file(properties.getProperty('RELEASE_STORE_FILE'))
            storePassword properties.getProperty('RELEASE_STORE_PASSWORD')
            keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
            keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            v2SigningEnabled false
        }
    }

    /**
     * buildTypes 代码块用来配置多个构建类型，构建系统默认定义了两个构建类型: debug 和 release
     * debug 构建类型默认不显式声明，但它包含调试工具并使用 debug key 签名
     * release 构建类型默认应用了混淆配置
     *
     * name：build type的名字
     * applicationIdSuffix：应用id后缀
     * versionNameSuffix：版本名称后缀
     * debuggable：是否生成一个debug的apk
     * minifyEnabled：是否混淆
     * proguardFiles：混淆文件
     * signingConfig：签名配置
     * manifestPlaceholders：清单占位符
     * shrinkResources：是否去除未利用的资源，默认false，表示不去除。
     * zipAlignEnable：是否使用zipalign工具压缩。
     * multiDexEnabled：是否拆成多个Dex
     * multiDexKeepFile：指定文本文件编译进主Dex文件中
     * multiDexKeepProguard：指定混淆文件编译进主Dex文件中
     */
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debugConfig
        }
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

    /**
     * 源代码集合，
     * 是Java插件用来描述和管理源代码及资源的一个抽象概念，
     * 是一个Java源代码文件和资源文件的集合，
     * 我们可以通过sourceSets更改源集的Java目录或者资源目录等
     */
    sourceSets {
        main {
            //告诉Gradle我的关于jni so包的存放路径就在app/libs上了，叫他编译的时候自己去找
            jniLibs.srcDirs = ['libs']
        }
        androidTest.setRoot('tests')
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    //更改生成的APK文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "ScFrame_v${variant.versionName}_${variant.buildType.getName()}_${getDate()}.apk"
        }
    }
}

//统一版本号
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support' &&
                requested.name != 'multidex' &&
                requested.name != 'multidex-instrumentation') {
            details.useVersion rootProject.ext.supportLibVersion
        } else if (requested.group == 'com.squareup.retrofit2') {
            details.useVersion rootProject.ext.retrofit2
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:design:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.android.support:gridlayout-v7:${rootProject.ext.supportLibVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation project(':ScFrame')
//    implementation 'com.github.sweet2o09:MyScFrame:v2.0.1'
}
